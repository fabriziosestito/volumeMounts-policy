rules:
  - apiGroups: [""]
    apiVersions: ["v1"]
    resources: ["pods"]
    operations: ["CREATE"] # kubernetes doesn't allow to add/remove privileged containers to an already running pod
  - apiGroups: [""]
    apiVersions: ["v1"]
    resources: ["replicationcontrollers"]
    operations: ["CREATE", "UPDATE"]
  - apiGroups: ["apps"]
    apiVersions: ["v1"]
    resources: ["deployments","replicasets","statefulsets","daemonsets"]
    operations: ["CREATE", "UPDATE"]
  - apiGroups: ["batch"]
    apiVersions: ["v1"]
    resources: ["jobs","cronjobs"]
    operations: ["CREATE", "UPDATE"]
mutating: false
contextAware: false
executionMode: kubewarden-wapc
annotations:
  # artifacthub specific
  io.artifacthub.displayName: volumeMounts
  io.artifacthub.resources: Pod,Deployment,Replicaset,Statefulset,Daemonset,Replicationcontroller,Job,Cronjob
  io.artifacthub.keywords: container, volumeMounts, volume, pod, workload resources
  io.kubewarden.policy.ociUrl: ghcr.io/kubewarden/policies/volumemounts
  # rest
  io.kubewarden.policy.title: volumemounts
  io.kubewarden.policy.description: Policy that inspects containers, init containers, and ephemeral containers, and restricts their usage of volumes by  checking the `volume` name being used in `volumeMounts[*].name`
  io.kubewarden.policy.author: "Kubewarden developers <cncf-kubewarden-maintainers@lists.cncf.io>"
  io.kubewarden.policy.url: https://github.com/kubewarden/volumemounts-policy
  io.kubewarden.policy.source: https://github.com/kubewarden/volumemounts-policy
  io.kubewarden.policy.license: Apache-2.0
